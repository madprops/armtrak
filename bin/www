#!/usr/bin/env node

/**
 * Module dependencies.
 */

const App = {}
const app = require(`../app`)
const debug = require(`debug`)(`armtrak:server`)
const http = require(`http`)
const readline = require(`readline`)

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || `3000`)
app.set(`port`, port)

/**
 * Create HTTP server.
 */

let server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on(`error`, onError)
server.on(`listening`, onListening)

const { Server } = require(`socket.io`)

const allowedOrigins = process.env.NODE_ENV === `production`
  ? [`https://armtrak.net`, `https://www.armtrak.net`] // Add your actual domains
  : [`http://localhost:3000`, `http://127.0.0.1:3000`, `http://armtrak.net:3000`]

const io = new Server(server, {
  cors: {
    origin: allowedOrigins,
    methods: [`GET`, `POST`],
    credentials: false // Set to true if you need authentication
  }
})

require(`../sockets`)(io, App)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server `error` event.
 */

function onError(error) {
  if (error.syscall !== `listen`) {
    throw error
  }

  let bind = typeof port === `string`
    ? `Pipe ` + port
    : `Port ` + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case `EACCES`:
      console.error(bind + ` requires elevated privileges`)
      process.exit(1)
    case `EADDRINUSE`:
      console.error(bind + ` is already in use`)
      process.exit(1)
    default:
      throw error
  }
}

let rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  prompt: `Cmd > `
})

rl.on(`line`, (input) => {
  let cmd = input.trim()

  if (!cmd) {
    return
  }

  App.run_command(cmd)
  rl.prompt()
})

/**
 * Event listener for HTTP server `listening` event.
 */

function onListening() {
  let addr = server.address()
  let bind = typeof addr === `string`
    ? `pipe ` + addr
    : `port ` + addr.port

  // Console colors
  const colors = {
    reset: `\x1b[0m`,
    bright: `\x1b[1m`,
    green: `\x1b[32m`,
    blue: `\x1b[34m`,
    yellow: `\x1b[33m`
  }

  console.log(`${colors.bright}${colors.green}✈ Server has started${colors.reset}`)
  console.log(`${colors.bright}${colors.blue}⚓ Port ${colors.yellow}${addr.port}${colors.reset}`)

  debug(`Listening on ` + bind)
  rl.prompt()
}
